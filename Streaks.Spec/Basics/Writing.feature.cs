// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Streaks.Spec.Basics
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class WritingFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Writing.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Writing", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Writing")))
            {
                Streaks.Spec.Basics.WritingFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Data that is uncommitted is not available to readers")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Writing")]
        public virtual void DataThatIsUncommittedIsNotAvailableToReaders()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Data that is uncommitted is not available to readers", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line 6
   testRunner.Given("an empty streak", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
    testRunner.When("I write \"100\" bytes of data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
     testRunner.And("I write \"50\" bytes of data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
     testRunner.And("I write \"25\" bytes of data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
     testRunner.And("I do not commit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
    testRunner.Then("the reader should not see any data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Data that is discarded is not available to readers")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Writing")]
        public virtual void DataThatIsDiscardedIsNotAvailableToReaders()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Data that is discarded is not available to readers", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 16
   testRunner.Given("an empty streak", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
    testRunner.When("I write \"100\" bytes of data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
     testRunner.And("I write \"50\" bytes of data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
     testRunner.And("I write \"25\" bytes of data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
     testRunner.And("I discard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
    testRunner.Then("the reader should not see any data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Data that is committed is available to readers")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Writing")]
        public virtual void DataThatIsCommittedIsAvailableToReaders()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Data that is committed is available to readers", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 26
   testRunner.Given("an empty streak", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
    testRunner.When("I write \"100\" bytes of data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
     testRunner.And("I write \"50\" bytes of data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
     testRunner.And("I write \"25\" bytes of data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
     testRunner.And("I commit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
    testRunner.Then("the reader should see \"3\" entries totalling \"175\" bytes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Extended write scenario with multiple discards and commits")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Writing")]
        public virtual void ExtendedWriteScenarioWithMultipleDiscardsAndCommits()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extended write scenario with multiple discards and commits", ((string[])(null)));
#line 34
this.ScenarioSetup(scenarioInfo);
#line 36
   testRunner.Given("an empty streak", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
    testRunner.When("I write \"100\" bytes of data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
     testRunner.And("I commit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
     testRunner.And("I write \"50\" bytes of data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
     testRunner.And("I discard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
     testRunner.And("I write \"25\" bytes of data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
     testRunner.And("I commit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
     testRunner.And("I write \"10\" bytes of data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
     testRunner.And("I do not commit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
    testRunner.Then("the reader should see \"2\" entries totalling \"125\" bytes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
